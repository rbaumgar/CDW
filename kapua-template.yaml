apiVersion: v1
kind: Template
metadata:
  annotations:
    description: >-
      A template for KAPUA server. 
      Modular IoT cloud platform to manage and integrate devices and their data.
      A solid integrated foundation of IoT services for any IoT application.
      .
      see https://www.eclipse.org/kapua/
    iconClass: icon-redis
    openshift.io/display-name: 'KAPUA'
    tags: 'iot,amq,IOT'
    version: 0.1.0
  name: kapua-template
parameters:
- name:           ELASTIC_SEARCH_MEMORY
  displayName:      ElasticSearch Memory
  descrption:       The minimum and maximun Java heap space for Elasticsearch
  value:            '512m'
- name:           ELASTIC_SEARCH_VOLUME_SIZE
  displayName:      ElasticSearch Volume Capacity
  description:      The size for the ElasicSearch Volume
  value:            10Gi
- name:           KAPUA_BROKER_VOLUME_SIZE
  displayName:      KAPUA Broker Volume Capacity
  description:      The size for the KAPUA Broker Volume
  value:            5Gi
- name:           KAPUA_SQL_VOLUME_SIZE
  displayName:      KAPUA SQL Volume Capacity
  description:      The size for the KAPUA SQL Volume
  value:            1Gi
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: elasticsearch
      pod: elasticsearch
    name: elasticsearch
  spec:
    replicas: 1
    selector:
      app: elasticsearch
      deploymentconfig: elasticsearch
      pod: elasticsearch
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: elasticsearch
          deploymentconfig: elasticsearch
          pod: elasticsearch
      spec:
        containers:
        - command:
          - elasticsearch
          - -Etransport.host=_site_
          - -Ecluster.name=kapua-datastore
          - -Ediscovery.type=single-node
          env:
          - name: ES_JAVA_OPTS
            value: "-Xms${ELASTIC_SEARCH_MEMORY} -Xmx${ELASTIC_SEARCH_MEMORY}"
          image: elasticsearch
          imagePullPolicy: Always
          name: elasticsearch
          ports:
          - containerPort: 9200
            protocol: TCP
          - containerPort: 9300
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9200
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: elasticsearch-storage
          persistentVolumeClaim:
            claimName: elasticsearch-volume
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - elasticsearch
        from:
          kind: ImageStreamTag
          name: elasticsearch:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      app: kapua
    name: kapua-api
  spec:
    replicas: 1
    selector:
      app: kapua
      deploymentconfig: kapua-api
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: kapua
          deploymentconfig: kapua-api
      spec:
        containers:
        - env:
          - name: JAVA_OPTS
            value: -Xmx1G
              -Dcommons.db.connection.host=$KAPUA_SQL_SERVICE_HOST
              -Dcommons.db.connection.port=$KAPUA_SQL_PORT_3306_TCP_PORT
              -Dcommons.db.schema.update=true
              -Dbroker.host=$KAPUA_BROKER_SERVICE_HOST
              -Ddatastore.elasticsearch.nodes=$ELASTICSEARCH_PORT_9200_TCP_ADDR
              -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=jolokia,password=kf5bPHhJ3r4lvNE
          image: kapua/kapua-api@sha256:1557099940edf68f87ab2c0d0bcc76fe19a9532e13b9f2fcd139f10c9f3ea61f
          imagePullPolicy: Always
          name: kapua-api
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
            name: jolokia
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - kapua-api
        from:
          kind: ImageStreamTag
          name: kapua-api:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: kapua
      pod: kapua-broker
    name: kapua-broker
  spec:
    replicas: 1
    selector:
      app: kapua
      deploymentconfig: kapua-broker
      pod: kapua-broker
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kapua
          deploymentconfig: kapua-broker
          pod: kapua-broker
      spec:
        containers:
        - env:
          - name: ACTIVEMQ_OPTS
            value: -Dcommons.db.connection.host=$KAPUA_SQL_SERVICE_HOST
              -Dcommons.db.connection.port=$KAPUA_SQL_PORT_3306_TCP_PORT
              -Dcommons.db.schema.update=true
              -Dmetrics.enable.jmx=true
              -Ddatastore.elasticsearch.nodes=$ELASTICSEARCH_PORT_9200_TCP_ADDR
              -Dcertificate.jwt.private.key=file:///home/kapua/key.pk8
              -Dcertificate.jwt.certificate=file:///home/kapua/cert.pem
              -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=jolokia,password=kf5bPHhJ3r4lvNE
          image: kapua/kapua-broker
          imagePullPolicy: Always
          name: kapua-broker
          ports:
          - containerPort: 1883
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8883
            protocol: TCP
          - containerPort: 61614
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 1883
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /maven/data
            name: kapua-broker-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: kapua-broker-storage
          persistentVolumeClaim:
            claimName: kapua-broker-volume
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - kapua-broker
        from:
          kind: ImageStreamTag
          name: kapua-broker:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: kapua
      pod: kapua-console
    name: kapua-console
  spec:
    replicas: 1
    selector:
      app: kapua
      deploymentconfig: kapua-console
      pod: kapua-console
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: kapua
          deploymentconfig: kapua-console
          pod: kapua-console
      spec:
        containers:
        - env:
          - name: JAVA_OPTS
            value: -Xmx1G
              -Dcommons.db.connection.host=$KAPUA_SQL_SERVICE_HOST
              -Dcommons.db.connection.port=$KAPUA_SQL_PORT_3306_TCP_PORT
              -Dcommons.db.schema.update=true -Dbroker.host=$KAPUA_BROKER_SERVICE_HOST
              -Ddatastore.elasticsearch.nodes=$ELASTICSEARCH_PORT_9200_TCP_ADDR
              -Dcertificate.jwt.private.key=file:///home/kapua/key.pk8
              -Dcertificate.jwt.certificate=file:///home/kapua/cert.pem
              -javaagent:/jolokia-jvm-agent.jar=port=8778,protocol=https,caCert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,clientPrincipal=cn=system:master-proxy,useSslClientAuthentication=true,extraClientCheck=true,host=0.0.0.0,discoveryEnabled=false,user=jolokia,password=kf5bPHhJ3r4lvNE
          envFrom:
          image: kapua/kapua-console
          imagePullPolicy: Always
          name: kapua-console
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
            name: jolokia
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - kapua-console
        from:
          kind: ImageStreamTag
          name: kapua-console:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: kapua
      pod: kapua-sql
    name: kapua-sql
  spec:
    replicas: 1
    selector:
      app: kapua
      deploymentconfig: kapua-sql
      pod: kapua-sql
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: kapua
          deploymentconfig: kapua-sql
          pod: kapua-sql
      spec:
        containers:
        - image: kapua/kapua-sql
          imagePullPolicy: Always
          name: kapua-sql
          ports:
          - containerPort: 3306
            protocol: TCP
          - containerPort: 8181
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
            name: jolokia
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/h2/data
            name: kapua-sql-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: kapua-sql-storage
          persistentVolumeClaim:
            claimName: kapua-sql-volume
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - kapua-sql
        from:
          kind: ImageStreamTag
          name: kapua-sql:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: elasticsearch
      pod: elasticsearch
    name: elasticsearch
  spec:
    ports:
    - name: 9200-tcp
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: 9300-tcp
      port: 9300
      protocol: TCP
      targetPort: 9300
    selector:
      deploymentconfig: elasticsearch
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kapua-api
    name: kapua-api
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: jolokia
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: kapua-api
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kapua
      pod: kapua-broker
    name: kapua-broker
  spec:
    ports:
    - name: mqtt-tcp
      port: 1883
      protocol: TCP
      targetPort: 1883
    - name: jolokia
      port: 8778
      protocol: TCP
      targetPort: 8778
    - name: 8883-tcp
      port: 8883
      protocol: TCP
      targetPort: 8883
    - name: mqtt-websocket-tcp
      port: 61614
      protocol: TCP
      targetPort: 61614
    selector:
      deploymentconfig: kapua-broker
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kapua
      pod: kapua-console
    name: kapua-console
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: jolokia
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: kapua-console
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kapua
      pod: kapua-sql
    name: kapua-sql
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    - name: 8181-tcp
      port: 8181
      protocol: TCP
      targetPort: 8181
    - name: jolokia
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: kapua-sql
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: kapua-api
    name: kapua-api
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: kapua-api
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: kapua
      pod: kapua-broker
    name: kapua-broker
  spec:
    port:
      targetPort: mqtt-websocket-tcp
    to:
      kind: Service
      name: kapua-broker
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: kapua
      pod: kapua-console
    name: kapua-console
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: kapua-console
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: elasticsearch-volume
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${ELASTIC_SEARCH_VOLUME_SIZE}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kapua-broker-volume
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${KAPUA_BROKER_VOLUME_SIZE}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: kapua-sql-volume
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${KAPUA_SQL_VOLUME_SIZE}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: kapua-api
    name: kapua-api
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: kapua/kapua-api
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: kapua
      pod: kapua-broker
    name: kapua-broker
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: kapua/kapua-broker
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: kapua
      pod: kapua-console
    name: kapua-console
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: kapua/kapua-console
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: kapua
      pod: kapua-sql
    name: kapua-sql
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: kapua/kapua-sql
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: elasticsearch
      pod: elasticsearch
    name: elasticsearch
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: elasticsearch
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source

